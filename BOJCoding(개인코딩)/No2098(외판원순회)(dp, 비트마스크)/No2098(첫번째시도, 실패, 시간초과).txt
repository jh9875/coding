import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main
{
	static final int MAX =987654321;
	static int N;
	static int[][] W;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		
		N =Integer.parseInt(br.readLine());
		W =new int[N+1][N+1];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				W[i+1][j+1] =Integer.parseInt(st.nextToken());
		}
		ans =solve();
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve()
	{
		int minDist =MAX;
		
		for(int start =1; start <=N; start++)
		{
			ArrayList<Integer> path =new ArrayList<>();
			boolean[] visited =new boolean[N+1];
			path.add(start);
			minDist =Math.min(minDist, travel(path, visited));
		}
		
		return minDist;
	}
	static int travel(ArrayList<Integer> path, boolean[] visited)
	{
		if(path.size() ==N+1)
		{
			if(path.get(0) ==path.get(path.size()-1))
				return 0;
		}
		int ret =MAX;
		
		for(int next =1; next <=N; next++)
		{
			int here =path.get(path.size()-1);
			if(!visited[next] && W[here][next] !=0)
			{
				path.add(next);
				visited[next] =true;
				ret =Math.min(ret, travel(path, visited) +W[here][next]);
				path.remove(path.size()-1);
				visited[next] =false;
			}
		}
		return ret;
	}
}
