처음에 이 문제가 다익스트라 알고리즘을 이용해서 해결하는거라고는 알고있었다.

근데 문득 동적계획법을 이용하면 어떨까? 라는 생각이 들어서 풀어봤다.

근데 부분적으론는 정답이기는 하나, 알고리즘에 오류가 있었다.

답이 왜 다르게 나왔는지 cache를 보며 따라가봤다.

근데 생각해보니까 각 (y, x)위치마다 상하좌우로 보는데 이동경로가 아직 탐색하지 못한 경우와
겹치는 경우에는 최저값을 얻지 못하고 그냥 지나가버렸다.

생각해보니 동적계획법을 이용할 때는 이전 문제와 현재 문제가 큰 관계 없을때만
적용 가능한 방법이다.

예를들어서 직각삼각형에서 왼쪽위에서 아래로 가는문제중 오른쪽과 아래로만 이동가능한
문제가 있다.

그 문제의 경우엔 이전 문제와 현재문제가 상관이 없는데

이 문제의 경우 상하좌우로 이동하다보니까 이전문제의 값에 영향을 받아서 실패했다.

외부의 어떤값에 의해서 현재 값이 달리지니 내가 배운내용대로 동적계획법은 이 문제에

적용하면 안된다.

내가 너무 생각없이 공부하고 있다는 생각이 든다.

만약 시험이나 대회같은곳에서 알고리즘의 종류를 알려주진 않을텐데

이런식으로 하면 아무것도 못할것같다.

그래도 여태까지 완전탐색, 동적계획법은 무적 알고리즘으로 알고있었는데
안되는 경우도 있는걸 이번에 배운것같다.

============================================

두번째 시도에선 다익스트라를 이용해봤다.

(0,0)에서부터 시작해서 인접해 있는 좌표들 중 거리가 가장 짧은것들을 추가해가면서

시도했다.