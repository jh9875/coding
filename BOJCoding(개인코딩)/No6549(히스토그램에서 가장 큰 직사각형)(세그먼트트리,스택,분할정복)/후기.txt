일단 이 문제를 분할정복으로 풀었다.
오늘 마침 종만북 알고리즘에서 분할정복을 공부할때 이문제가 예시로 나왔기 때문이다.

이해는 하긴 했지만 거의 답을보고 푼거나 마찬가지다...ㅎ

아무튼 풀이를 써보자면

일단 이 문제를 보고 가장먼저 생각난 방법이 브루트포스 방법이다.

배열에 각 데이터들을 받고, left와 rifht cursor를 둬서 모든 경우를 다 해보는 방법이 생각났다.
근데 데이터의 갯수를 보니 최대 100000개이다. 이중for문으로 풀면 실패할게 분명해서 
이 방법은 패스다.

그래서 풀어본 방법이 분할정복으로 푼 방법이다.

일단 최대가 될 수 있는 방법이 3가지 유형이 존재한다.
1. 전체 배열을 기준으로 가운데에서 왼쪽에 몰려있다.
2. 	" "		       오른쪽에 몰려있다.
3. 중간에 걸쳐있다.

이 세가지를 확인하면 된다.

결론은 함수는 왼쪽과 오른쪽 비교 및 가운데 2개를 포함한 확장값을 비교해서 최대값을 찾아
내야 한다.

좀 더 이해하기 쉽게 하기 위해 재귀호출을 계속하다보면
left와 right가 같아지는 경우가 있다.(범위 길이가 1, 기저사례)

여기소 왼쪽과 오른쪽, 비교해서 큰값을 return할 값의 후보로 정하고
이 큰 후보와 가운데부터 확장한 값을 비교해서 큰 값을 반환하면 된다.

예를들어 7 1 5 9가 있다면
가운데는 1과 5사이다.
왼쪽부분을 보면 7과 1이 있는데 여기서 반씩 나누면 1과 5이다.
둘중 큰것은 5이고 이게 후보에 든다.
그다음 비교할거는 7(왼쪽)과 7 1 이다(가운데 걸침)
근데 7과 1에 걸칠려면 1의 높이에 맞춰줘야 하므로 넓이는 2가 되서 5가 더 크게된다.

즉 7 1 (왼쪽)에서 가장 큰것은 7일때다.

오른쪽을 보면 5 9가 있는데 왼쪽과 오른쪽을 비교해보면 9가 더 크다.
이것을 후보에 두고
중간에 걸친 5와9는 낮은값에 맞춰 넓이를 구하면 10이 된다.
결국 5 9 (오른쪽)에서 가장 큰것은 중간에 걸침(5 9) 넓이는 10이다.

7 1 5 9에서 가운데를 보면 
1 5 부분에서 양 옆 숫자중에 (7 9) 더 큰값은 9이다.
그래서 확장하면 1 5 9가 된다.
그리고 더 확장하려 했더니 오른쪽은 할수가 없다.
그래서 왼쪽으로 확장했더니 7 1 5 9가 됐다.
근데 제일 낮은 높이가 1이므로 1에 맞춰서 보면 가운데 걸쳤을때 총 넓이가 4가 된다.

결국 아까 오른쪽(5 9) 넓이 10과 비교해보면 10이 더 크다.
결론은 10이 된다.

데이터가 더 많을때도 이와같이 하면 된다.



마지막으로 이 풀이를 봤을 때 결국 프로그램 성능이 좋아질까? 생각을 했는데
시간복잡도를 보니까 좋아지는 것을 알았다.

만약 부르트포스로 하면 이중 for문으로 left rigt값을 변경해 줘야하므로
O(n^)이 된다.

만약 분할정복으로 하면

함수에서 하는 일이 왼쪽 오른쪽 나누기, 중간에서 확장하기 3가지 작업을 하는데
나누는 일은 크기 n을 n/2로 나누고 재귀호출만 하고
중간에서 확장하는 작업은 가운데 2개에서 크기가 n인 데이터를 확장해 가므로
이 작업이 시간복잡도를 결정한다. 결국 O(n)이 된다.
결국 나눠서 호출하고, O(n)시간이 드므로 O(nlongn)이 된다..
