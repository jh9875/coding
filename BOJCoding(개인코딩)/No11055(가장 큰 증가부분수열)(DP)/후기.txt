이것도 이전에 풀었던 가장긴 증가(감소)하는 부분수열과
비슷한 dp문제여서 쉽게 풀수있었다.

이것도 왼쪽에서 오른쪽으로 증가하는 방향이므로
뒤에서부터 검사하면 된다.

for(int i =N; i>0; i--)
{
	int best =0;
	for(int j =i+1; j <N+1; j++)
	{
		if(arr[i] <arr[j])		//증가하는부분일때
		{
			if(best <dp[j])
				best =dp[j];
		}
	}
	dp[i] +=best;
}
Arrays.sort(dp);

코드부분은 이러하다

일단 i는 현재 dp의 값을 정할 인덱스이고
j는 i보다 뒤에있는 인덱스들을 검사할 것이다.

두개의 for문안에 있는 if(arr[i] <arr[j]) 조건은
뒤에 있는 값중에 증가하는 부분이어야 하는 조건이다.
그리고 best는 증가의 누적값 중 가장 큰 값을 담는다.

dp[i] +=best는 누적값이다.

------------------------------------2번째 후기 200115
일단 위 풀이는 처음 각각의 경우의 수를 그려가면서 어떤 식을 도출해내고 풀었던 기억이 난다.

지금 이 문제를 다시 푸는 이유는 재귀함수를 익숙하게 쓰고싶어서 dp문제중에서 쉬운축에
속하는 이문제를 다시풀어보고자 한다.

이번 풀이에서 사용한 방법은 재귀함수를 이용한 완전탐색+메모이제이션을 이용했다.

