import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Pos
	{
		int y, x, cnt;
		Pos(int y, int x, int cnt)
		{
			this.y =y;
			this.x =x;
			this.cnt =cnt;
		}
	}
	static int N;
	static int[][] map;
	static int[] dy = {1, 0, -1, 0};
	static int[] dx = {0, 1, 0, -1};
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		N =Integer.parseInt(br.readLine());
		map =new int[N][N];
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				map[i][j] =Integer.parseInt(st.nextToken());
		}
		bw.write(solve() +"\n");
		bw.flush();
	}
	static int solve()
	{
		int ret =Integer.MAX_VALUE;
		int index =1;
		boolean[][] visited =new boolean[N][N];
		for(int i =0; i <N; i++)
			for(int j =0; j <N; j++)
				if(map[i][j] ==1 && !visited[i][j])
					sepLand(i, j, index++, visited);
		visited =new boolean[N][N];
		for(int i =0; i <N; i++)
			for(int j =0; j <N; j++)
				if(map[i][j] !=0)
					ret =Math.min(ret, bridgeLen(i, j, visited));
		return ret;
	}
	static void sepLand(int y, int x, int index, boolean[][] visited)
	{
		Queue<Pos> queue =new LinkedList<>();
		queue.add(new Pos(y, x, 0));
		visited[y][x] =true;
		map[y][x] =index;
		
		while(!queue.isEmpty())
		{
			int curY =queue.peek().y;
			int curX =queue.peek().x;
			queue.poll();
			
			for(int dir =0; dir <4; dir++)
			{
				int nextY =curY +dy[dir];
				int nextX =curX +dx[dir];
				if(!inRange(nextY, nextX)) continue;
				if(map[nextY][nextX] ==1 && !visited[nextY][nextX])
				{
					queue.add(new Pos(nextY, nextX, 0));
					visited[nextY][nextX] =true;
					map[nextY][nextX] =index;
				}
			}
		}
	}
	static int bridgeLen(int y, int x, boolean[][] visited)
	{
		int sameLand =map[y][x];
		Queue<Pos> queue =new LinkedList<>();
		queue.add(new Pos(y, x, 0));
		visited[y][x] =true;
		
		while(!queue.isEmpty())
		{
			int curY =queue.peek().y;
			int curX =queue.peek().x;
			int cnt =queue.peek().cnt;
			queue.poll();
			
			if(map[curY][curX] !=0 && map[curY][curX] !=sameLand)
				return cnt-1;
			for(int dir =0; dir <4; dir++)
			{
				int nextY =curY +dy[dir];
				int nextX =curX +dx[dir];
				if(!inRange(nextY, nextX) || map[nextY][nextX] ==sameLand) continue;
				
				queue.add(new Pos(nextY, nextX, cnt+1));
				visited[nextY][nextX] =true;
			}
		}
		return Integer.MAX_VALUE;
	}
	static boolean inRange(int y, int x)
	{
		if(y <0 || y >=N || x <0 || x >=N)
			return false;
		return true;
	}
}
