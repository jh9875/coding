import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.StringTokenizer;

public class Main
{
	
	public static void main(String[] args) throws IOException
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int t =Integer.parseInt(br.readLine());
		while(t-- >0)
		{
			int n =Integer.parseInt(br.readLine());
			int[] arr =new int[n];
			String s =br.readLine();
			StringTokenizer st =new StringTokenizer(s);
			for(int i =0; i <arr.length; i++)
				arr[i] =Integer.parseInt(st.nextToken());
			bw.write(cycle(arr) + "\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
	public static int cycle(int[] arr)
	{
		int count =0;
		boolean[] visited =new boolean[arr.length];
		for(int i =0; i <arr.length; i++)
		{
			boolean check =true;
			HashSet<Integer> set =new HashSet<Integer>();
			if(!visited[i])		//확인 안한부분
			{
				int cur =i;
				int next =arr[i] -1;
				visited[cur] =true;
				set.add(cur);
				while(check)
				{
					if(!set.contains(next))	//아직 안간부분이라면
					{
						visited[next] =true;
						set.add(next);
						cur =next;
						next =arr[next] -1;
					}else
					{
						check =false;
						count++;
					}
						
				}
			}
		}
		return count;
	}
}