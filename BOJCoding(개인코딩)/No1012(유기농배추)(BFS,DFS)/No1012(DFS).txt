import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int y;
		int x;
		Point(int y, int x)
		{
			this.y =y;
			this.x =x;
		}
	}
	static int[] dirY = {-1, 0, 1, 0};
	static int[] dirX = {0, 1, 0, -1};
	static int M ,N;
	static int[][] map;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int T, K;
		int X, Y;
		int ans;
		
		T =Integer.parseInt(br.readLine());
		
		while(T-- >0)
		{
			ans =0;
			st =new StringTokenizer(br.readLine());
			M =Integer.parseInt(st.nextToken());
			N =Integer.parseInt(st.nextToken());
			K =Integer.parseInt(st.nextToken());
			map =new int[N][M];
			
			while(K-- >0)
			{
				st =new StringTokenizer(br.readLine());
				X =Integer.parseInt(st.nextToken());
				Y =Integer.parseInt(st.nextToken());
				map[Y][X] =1;
			}
			
			for(int i =0; i <N; i++)
			{
				for(int j =0; j <M; j++)
				{
					if(map[i][j] ==1)
					{
						spread(i, j);
						ans++;
					}
				}
			}
			bw.write(ans +"\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}
	public static void spread(int y, int x)
	{
		int nextY, nextX;
		
		for(int i =0; i <4; i++)
		{
			nextY =y +dirY[i];
			nextX =x +dirX[i];
			
			if(-1 <nextY && nextY <N && -1 <nextX && nextX <M && map[nextY][nextX] ==1)
			{
				map[nextY][nextX] =2;
				spread(nextY, nextX);
			}
		}
	}
}
