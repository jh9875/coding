import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main
{
	public static void main(String[] args)
	{
		Scanner input =new Scanner(System.in);
		
		int n =input.nextInt();
		if(n ==2)
		{
			int n1 =input.nextInt();
			int n2 =input.nextInt();
			cd(n1, n2);
		}else if(n ==3)
		{
			int n1 =input.nextInt();
			int n2 =input.nextInt();
			int n3 =input.nextInt();
			cd(n1, n2, n3);
		}
	}
	public static void cd(int n1, int n2)
	{
		Queue<Integer> queue1 =new LinkedList<Integer>();
		Queue<Integer> queue2 =new LinkedList<Integer>();
		
		for(int i =1; i <=n1; i++)
			if(n1 %i ==0)
				queue1.add(i);
		for(int i =1; i <=n2; i++)
			if(n2 %i ==0)
				queue2.add(i);
		int num1 =queue1.poll();
		int num2 =queue2.poll();
		
		while(queue1.size() >0 && queue2.size() >0)
		{
			if(num1 ==num2)
			{
				System.out.println(num1);
				num1 =queue1.poll();
				num2 =queue2.poll();
			}else if(num1 > num2)
			{
				num2 =queue2.poll();
			}else if(num1 < num2)
			{
				num1 =queue1.poll();
			}
		}
	}
	public static void cd(int n1, int n2, int n3)
	{
		Queue<Integer> queue1 =new LinkedList<Integer>();
		Queue<Integer> queue2 =new LinkedList<Integer>();
		Queue<Integer> queue3 =new LinkedList<Integer>();
		
		for(int i =1; i <=n1; i++)
			if(n1 %i ==0)
				queue1.add(i);
		for(int i =1; i <=n2; i++)
			if(n2 %i ==0)
				queue2.add(i);
		for(int i =1; i <=n3; i++)
			if(n3 %i ==0)
				queue3.add(i);
		int num1 =queue1.poll();
		int num2 =queue2.poll();
		int num3 =queue3.poll();
		while(queue1.size() >0 && queue2.size() >0 && queue3.size()>0)
		{
			if(num1 ==num2 && num2 ==num3)
			{
				System.out.println(num1);
				num1 =queue1.poll();
				num2 =queue2.poll();
				num3 =queue3.poll();
			}else							//공약수가 아닌경우 제일 작은수를 뺀다.
			{
				int min =min(num1, num2, num3);
				if(min ==num1)
					num1 =queue1.poll();
				else if(min ==num2)
					num2 =queue2.poll();
				else if(min ==num3)
					num3 =queue3.poll();
			}
		}
	}
	public static int min(int n1, int n2, int n3)
	{
		ArrayList<Integer> al =new ArrayList<Integer>();
		al.add(n1);
		al.add(n2);
		al.add(n3);
		Collections.sort(al);
		return al.get(0);
	}
}

//----------------------------------------
import java.io.*;
import java.util.*;

public class Main
{
	public static void main(String[] args) throws IOException
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		int n =Integer.parseInt(br.readLine());
		if(n ==2)
		{
			String s =br.readLine();
			StringTokenizer st =new StringTokenizer(s);
			int n1 =Integer.parseInt(st.nextToken());
			int n2 =Integer.parseInt(st.nextToken());
			cd(n1, n2);
		}else if(n ==3)
		{
			String s =br.readLine();
			StringTokenizer st =new StringTokenizer(s);
			int n1 =Integer.parseInt(st.nextToken());
			int n2 =Integer.parseInt(st.nextToken());
			int n3 =Integer.parseInt(st.nextToken());
			cd(n1, n2, n3);
		}
	}
	public static void cd(int n1, int n2) throws IOException
	{
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		Queue<Integer> queue1 =new LinkedList<Integer>();
		Queue<Integer> queue2 =new LinkedList<Integer>();
		
		for(int i =1; i <=n1; i++)
			if(n1 %i ==0)
				queue1.add(i);
		for(int i =1; i <=n2; i++)
			if(n2 %i ==0)
				queue2.add(i);
		int num1 =queue1.poll();
		int num2 =queue2.poll();
		
		while(queue1.size() >0 && queue2.size() >0)
		{
			if(num1 ==num2)
			{
				bw.write(String.valueOf(num1) + "\n");
				num1 =queue1.poll();
				num2 =queue2.poll();
			}else if(num1 > num2)
			{
				num2 =queue2.poll();
			}else if(num1 < num2)
			{
				num1 =queue1.poll();
			}
		}
		bw.flush();
		bw.close();
	}
	public static void cd(int n1, int n2, int n3) throws IOException
	{
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		Queue<Integer> queue1 =new LinkedList<Integer>();
		Queue<Integer> queue2 =new LinkedList<Integer>();
		Queue<Integer> queue3 =new LinkedList<Integer>();
		
		for(int i =1; i <=n1; i++)
			if(n1 %i ==0)
				queue1.add(i);
		for(int i =1; i <=n2; i++)
			if(n2 %i ==0)
				queue2.add(i);
		for(int i =1; i <=n3; i++)
			if(n3 %i ==0)
				queue3.add(i);
		int num1 =queue1.poll();
		int num2 =queue2.poll();
		int num3 =queue3.poll();
		while(queue1.size() >0 && queue2.size() >0 && queue3.size()>0)
		{
			if(num1 ==num2 && num2 ==num3)
			{
				bw.write(String.valueOf(num1) + "\n");
				num1 =queue1.poll();
				num2 =queue2.poll();
				num3 =queue3.poll();
			}else							//공약수가 아닌경우 제일 작은수를 뺀다.
			{
				int min =min(num1, num2, num3);
				if(min ==num1)
					num1 =queue1.poll();
				else if(min ==num2)
					num2 =queue2.poll();
				else if(min ==num3)
					num3 =queue3.poll();
			}
		}
		bw.flush();
		bw.close();
	}
	public static int min(int n1, int n2, int n3)
	{
		ArrayList<Integer> al =new ArrayList<Integer>();
		al.add(n1);
		al.add(n2);
		al.add(n3);
		Collections.sort(al);
		return al.get(0);
	}
}