import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Pair		//사람번호, 촌수.
	{
		int p;
		int c;
		Pair(int p, int c)
		{
			this.p =p;
			this.c =c;
		}
	}
	static int n;
	static boolean[][] relative;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int m, ans;
		int p1, p2, n1, n2;
		
		n =Integer.parseInt(br.readLine());
		relative =new boolean[n+1][n+1];
		
		st =new StringTokenizer(br.readLine());
		p1 =Integer.parseInt(st.nextToken());
		p2 =Integer.parseInt(st.nextToken());
		
		m =Integer.parseInt(br.readLine());
		while(m-- >0)
		{
			st =new StringTokenizer(br.readLine());
			n1 =Integer.parseInt(st.nextToken());
			n2 =Integer.parseInt(st.nextToken());
			relative[n1][n2] =true;
			relative[n2][n1] =true;
		}
		ans =bfs(p1, p2);
		bw.write(ans +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static int bfs(int p1, int p2)
	{
		int ret =-1;
		int p, c;
		Pair cur;
		boolean[] visited =new boolean[n+1];
		Queue<Pair> queue =new LinkedList<>();
		queue.offer(new Pair(p1, 0));
		
		while(!queue.isEmpty())
		{
			cur =queue.poll();
			p =cur.p;
			c =cur.c;
			visited[p] =true;
			
			if(p ==p2)
			{
				ret =c;
				break;
			}
			
			for(int i =1; i <=n; i++)
				if(relative[p][i] && !visited[i])
					queue.offer(new Pair(i, c+1));
		}
		
		return ret;
	}
}
