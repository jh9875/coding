import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static final int MAX =987654321;
	static int N;
	static int[][] W;
	static int[][] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		
		N =Integer.parseInt(br.readLine());
		W =new int[N][N];
		cache =new int[N][1<<N];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				W[i][j] =Integer.parseInt(st.nextToken());
		}
		ans =travel(0, 1);
		bw.write(ans +"\n");
		bw.flush();
	}
	static int travel(int here, int visited)
	{
		if(visited ==(1 <<N)-1)
		{
			if(W[here][0] !=0)
				return W[here][0];
			else
				return MAX;
		}
		if(cache[here][visited] !=0)
			return cache[here][visited];
		cache[here][visited] =MAX;
		
		for(int next =0; next <N; next++)
		{
			if((visited & (1 <<next)) >0) continue;
			if(W[here][next] !=0)
				cache[here][visited] =
				Math.min(cache[here][visited], travel(next, visited +(1<<next)) +W[here][next]);
		}
		return cache[here][visited];
	}
}
