import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Main
{
	static class numCount implements Comparable<numCount>
	{
		int n;
		int cnt;
		numCount(int n, int c)
		{
			this.n =n;
			this.cnt =c;
		}
		@Override
		public int compareTo(numCount nc)
		{
			if(this.cnt ==nc.cnt)
				return this.n -nc.n;
			else
				return this.cnt -nc.cnt;
		}
	}
	static int r, c, k;
	static int rLen =3, cLen =3;
	static int[] count;
	static int[][] arr =new int[101][101];
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		r =Integer.parseInt(st.nextToken());
		c =Integer.parseInt(st.nextToken());
		k =Integer.parseInt(st.nextToken());
		
		for(int i=1; i <4; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =1; j <4; j++)
				arr[i][j] =Integer.parseInt(st.nextToken());
		}
		
		int cnt =0;
		
		print();
		
		while(cnt <101)
		{
			if(arr[r][c] ==k)
				break;
			
			System.out.println("rLen: " +rLen);
			System.out.println("cLen: " +cLen);
			if(rLen <cLen)
				cOperation();
			else
				rOperation();
			
			print();
			
			cnt++;
		}
		
		if(cnt >100)
			bw.write(-1 +"\n");
		else
			bw.write(cnt +"\n");
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void rOperation()
	{
		int maxLen =0;
		
		for(int i =1; i <101; i++)
		{
			count =new int[101];
			
			for(int j =1; j <101; j++)
			{
				count[arr[i][j]]++;
				arr[i][j] =0;
			}
			
			int idx =1;
			ArrayList<numCount> al =new ArrayList<>();
			
			for(int j =1; j <101; j++)
			{
				if(count[j] !=0)
					al.add(new numCount(j, count[j]));
			}
			Collections.sort(al);
			
			for(int j =0; j <al.size(); j++)
			{
				if(idx >100)
					break;
				numCount nc =al.get(j);
				arr[i][idx++] =nc.n;
				arr[i][idx++] =nc.cnt;
			}
			
			if(maxLen <idx-1)
				maxLen =idx-1;
		}
		cLen =maxLen;
	}
	public static void cOperation()
	{
		int maxLen =0;
		
		for(int i =1; i <101; i++)
		{
			count =new int[101];
			
			for(int j =1; j <101; j++)
			{
				count[arr[j][i]]++;
				arr[j][i] =0;
			}
			
			int idx =1;
			ArrayList<numCount> al =new ArrayList<>();
			
			for(int j =1; j <101; j++)
			{
				if(count[j] !=0)
					al.add(new numCount(j, count[j]));
			}
			Collections.sort(al);
			
			for(int j =0; j <al.size(); j++)
			{
				if(idx >100)
					break;
				numCount nc =al.get(j);
				arr[idx++][i] =nc.n;
				arr[idx++][i] =nc.cnt;
			}
			
			if(maxLen <idx-1)
				maxLen =idx-1;
		}
		rLen =maxLen;
	}
	
	public static void print()
	{
		for(int i =1; i <10; i++)
		{
			for(int j =1; j <10; j++)
				System.out.print(arr[i][j] +" ");
			System.out.println();
		}
		System.out.println("=========================");
	}
}
