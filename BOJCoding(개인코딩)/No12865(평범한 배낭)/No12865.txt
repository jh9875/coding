import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static class Item
	{
		int w;
		int v;
		Item(int w, int v)
		{
			this.w =w;
			this.v =v;
		}
	}
	static int N, K;
	static Item[] items;
	static int[][] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int w, v, ans;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		K =Integer.parseInt(st.nextToken());
		items =new Item[N];
		cache =new int[101][100001];
		for(int i =0; i <101; i++)
			Arrays.fill(cache[i], -1);
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			w =Integer.parseInt(st.nextToken());
			v =Integer.parseInt(st.nextToken());
			items[i] =new Item(w, v);
		}
		ans =packing(0, 0);
		bw.write(ans +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static int packing(int index, int totalWeight)
	{
		if(index ==N)
			return 0;
		if(cache[index][totalWeight] !=-1)
			return cache[index][totalWeight];
		
		cache[index][totalWeight] =0;
		
		cache[index][totalWeight] =packing(index+1, totalWeight);
		
		if(totalWeight +items[index].w <=K)
			cache[index][totalWeight] =Math.max(cache[index][totalWeight], 
					packing(index+1, totalWeight +items[index].w) +items[index].v);
		return cache[index][totalWeight];
	}
}
