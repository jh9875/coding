import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int r;
		int c;
		int count;
		int sum;
		
		Point(int r, int c, int count, int sum)
		{
			this.r =r;
			this.c =c;
			this.count =count;
			this.sum =sum;
		}
	}
	static int max =Integer.MIN_VALUE;
	static int N, M;
	static int[][] map;
	static int[] dirR = {0, 1, 0, -1};		//동, 남, 서, 북
	static int[] dirC = {1, 0, -1, 0};
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		map =new int[N][M];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <M; j++)
				map[i][j] =Integer.parseInt(st.nextToken());
		}
		
		search();
		
		bw.write(max +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	public static void search()
	{
		for(int i =0; i <N; i++)
		{
			for(int j =0; j <M; j++)
			{
				int n =bfs(i, j);
				if(n >max)				//삿각모양 외 나머지.
					max =n;
				n =func(i, j) +map[i][j];		
				if(n >max)				//삿갓 모양
					max =n;
			}
		}
	}
	public static int func(int r, int c)
	{
		int min =Integer.MAX_VALUE;
		int sum =0;
		int count =0;
		
		for(int i =0; i <4; i++)
		{
			int nextR =r+dirR[i];
			int nextC =c+dirC[i];
			
			if(0 <=nextR && nextR <N && 0 <=nextC && nextC <M)
			{
				sum +=map[nextR][nextC];
				count++;
				
				if(min >map[nextR][nextC])
					min =map[nextR][nextC];
			}
		}
		if(count ==4)
		{
			sum -=min;
			return sum;
		}else if(count ==3)
		{
			return sum;
		}else
			return 0;
	}
	public static int bfs(int r, int c)		//시작점을 기준의로 인근 4개칸을 조사하면 가능?(삿갓 모양  제외)
	{
		Queue<Point> queue =new LinkedList<>();
		int max =0;
		boolean[][] visited =new boolean[N][M];
		
		queue.offer(new Point(r, c, 1, map[r][c]));
		visited[r][c] =true;
		
		while(!queue.isEmpty())
		{
			Point p =queue.poll();
			if(p.count ==4)					//인접한 4칸을 탐색한 경우.
			{
				if(p.sum >max)
					max= p.sum;
			}
			
			for(int i =0; i <4; i++)
			{
				int nextR =p.r +dirR[i];
				int nextC =p.c +dirC[i];
				
				if(0 <=nextR && nextR <N && 0 <=nextC && nextC <M && !visited[nextR][nextC])
				{
					queue.offer(new Point(nextR, nextC, p.count+1, p.sum +map[nextR][nextC]));
					visited[nextR][nextC] =true;
				}
			}
		}
		
		return max;
	}
	
}
