import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main
{
	static class Pos implements Comparable<Pos>
	{
		int y;
		int x;
		int cost;
		Pos(int y, int x, int cost)
		{
			this.y =y;
			this.x =x;
			this.cost =cost;
		}
		@Override
		public int compareTo(Pos p)
		{
			return this.cost -p.cost;
		}
	}
	static int[] dirY ={1, 0, -1, 0};
	static int[] dirX ={0, 1, 0, -1};
	static int[][] map;
	static int N, M;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		String input;
		int ans =0;
		
		st =new StringTokenizer(br.readLine());
		M =Integer.parseInt(st.nextToken());
		N =Integer.parseInt(st.nextToken());
		map =new int[N+1][M+1];
		
		for(int i =1; i <=N; i++)
		{
			input =br.readLine();
			for(int j =1; j <=M; j++)
				map[i][j] =input.charAt(j-1) -'0';
		}
		
		ans =dijkstra();
		bw.write(ans +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	static int dijkstra()
	{
		if(N ==1 && M ==1)
			return 0;
		int[][] dist =new int[N+1][M+1];
		PriorityQueue<Pos> pq =new PriorityQueue<>();
		for(int i =1; i <=N; i++)
			Arrays.fill(dist[i], Integer.MAX_VALUE);
		
		pq.add(new Pos(1, 1, 0));
		
		while(!pq.isEmpty())
		{
			int y =pq.peek().y;
			int x =pq.peek().x;
			int cost =pq.peek().cost;
			pq.poll();
			
			if(dist[y][x] <cost)
				continue;
			
			for(int i =0; i <4; i++)
			{
				int nextY =y +dirY[i];
				int nextX =x +dirX[i];
				
				if(inRange(nextY, nextX))
				{
					int nextDist =cost +map[nextY][nextX];
					
					if(dist[nextY][nextX] >nextDist)
					{
						dist[nextY][nextX] =nextDist;
						pq.add(new Pos(nextY, nextX, nextDist));
					}
				}
			}
		}
		
		return dist[N][M];
	}
	
	static boolean inRange(int y, int x)
	{
		if(y <1 || N <y || x <1 || M <x)
			return false;
		return true;
	}
}
