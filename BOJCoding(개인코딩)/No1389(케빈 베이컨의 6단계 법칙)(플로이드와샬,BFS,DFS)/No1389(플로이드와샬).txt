import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static final int MAX =1000;
	static int N;
	static int[][] relation;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int M, n1, n2;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		relation =new int[N+1][N+1];
		for(int i =1; i <=N; i++)
		{
			Arrays.fill(relation[i], MAX);
			relation[i][i] =0;
		}
		
		while(M-- >0)
		{
			st =new StringTokenizer(br.readLine());
			n1 =Integer.parseInt(st.nextToken());
			n2 =Integer.parseInt(st.nextToken());
			relation[n1][n2] =1;
			relation[n2][n1] =1;
		}
		floyd();
		
		bw.write(getAns() +"\n");
		bw.flush();
	}
	
	static void floyd()
	{
		for(int k =1; k <=N; k++)
		{
			for(int i =1; i <=N; i++)
			{
				for(int j =1; j <=N; j++)
				{
					if(relation[i][j] >relation[i][k] +relation[k][j])
						relation[i][j] =relation[i][k] +relation[k][j];
				}
			}
		}
	}
	
	static int getAns()
	{
		int ret =0;
		int minValue =Integer.MAX_VALUE;
		
		for(int i =1; i <=N; i++)
		{
			int sum =0;
			for(int j =1; j <=N; j++)
				sum +=relation[i][j];
			if(sum <minValue)
			{
				minValue =sum;
				ret =i;
			}
		}
		return ret;
	}
}
