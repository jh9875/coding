import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int r;
		int c;
		int v;
		
		Point(int r, int c, int v)
		{
			this.r =r;
			this.c =c;
			this.v =v;
		}
	}
	static int N, M;
	static int min =Integer.MAX_VALUE;
	static int count =0;
	static int[] dirR = {0, 1, 0, -1};			//동 남,서,북
	static int[] dirC = {1, 0, -1, 0};
	static int[][] map;
	static ArrayList<Point> al =new ArrayList<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		map =new int[N][M];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			
			for(int j =0; j <M; j++)
			{
				int v =Integer.parseInt(st.nextToken());
				if(0 <v && v <6)
					al.add(new Point(i, j, v));
				map[i][j] =v;
			}
		}
		count =al.size();
		search(0);
		
		bw.write(min +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	public static void search(int index)
	{
		if(index ==count)
		{
			int sum =getSum();
			if(min >sum)
				min =sum;
			
			return;
		}
		Point p =al.get(index);
		
		if(p.v ==1)
		{
			for(int i =0; i <4; i++)
			{
				paint(p.r, p.c, i, index);
				search(index+1);
				erase(p.r, p.c, i, index);
			}
		}else if(p.v ==2)
		{
			for(int i =0; i <2; i++)
			{
				paint(p.r, p.c, i, index);
				paint(p.r, p.c, i+2, index);
				
				search(index+1);
				
				erase(p.r, p.c, i, index);
				erase(p.r, p.c, i+2, index);
			}
		}else if(p.v ==3)
		{
			for(int i =0; i <4; i++)
			{
				paint(p.r, p.c, i, index);
				paint(p.r, p.c, i-1, index);
				
				search(index+1);
				
				erase(p.r, p.c, i, index);
				erase(p.r, p.c, i-1, index);
			}
		}else if(p.v ==4)
		{
			for(int i =0; i <4; i++)
			{
				paint(p.r, p.c, i, index);
				paint(p.r, p.c, (i+1)%4, index);
				paint(p.r, p.c, (i+2)%4, index);
				
				search(index+1);
				
				erase(p.r, p.c, i, index);
				erase(p.r, p.c, (i+1)%4, index);
				erase(p.r, p.c, (i+2)%4, index);
			}
		}else if(p.v ==5)
		{
			for(int i =0; i <4; i++)
				paint(p.r, p.c, i, index);
			
			search(index+1);
			
			for(int i =0; i <4; i++)
				erase(p.r, p.c, i, index);
		}
	}
	public static void paint(int r, int c, int d, int index)
	{
		if(d ==-1)
			d =3;
		int nextR =r+dirR[d];
		int nextC =c+dirC[d];
		
		while(-1 <nextR && nextR <N 
				&& -1 <nextC && nextC <M)
		{
			if(map[nextR][nextC] ==6)
				break;
			else if(map[nextR][nextC] ==0)
				map[nextR][nextC] =index+10;			//index+10은 감시한곳.
			
			nextR +=dirR[d];
			nextC +=dirC[d];
		}
	}
	public static void erase(int r, int c, int d, int index)
	{
		if(d ==-1)
			d =3;
		int nextR =r+dirR[d];
		int nextC =c+dirC[d];
		
		while(-1 <nextR && nextR <N
				&& -1 <nextC && nextC <M)
		{
			if(map[nextR][nextC] ==6)
				break;
			else if(map[nextR][nextC] ==index+10)
				map[nextR][nextC] =0;
			
			nextR +=dirR[d];
			nextC +=dirC[d];
		}
	}
	public static int getSum()
	{
		int sum =0;
		
		for(int i =0; i <N; i++)
		{
			for(int j =0; j <M; j++)
			{
				if(map[i][j] ==0)
					sum++;
			}
		}
		
		return sum;
	}
}
