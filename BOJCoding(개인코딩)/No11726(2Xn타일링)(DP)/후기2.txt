전에는 dp문제를 풀때 반복문을 써서 했는데 요즘 새로 dp를 공부하면서 재귀함수를 쓰면서
연습하고있다.

결과를 비교해보니 반복문을 쓴것보다 재귀함수로 dp를 한게 더 빠르게 나온다.

그리고 또 다시 느낀점은 예전에는 이 문제가 어렵게만 느껴졌는데 지금은 쉬운것같다.

문제 해설을 써보겠다.

일단 타일링을 할때 가로로 n만큼 칠해야 되는데 가능한 가지수는 2가지다

하나를 이용해서 2*1로 채우거나
두개를 이용해서 2*2로 채우는 방법이 있다.

타일링 하는 함수를 tiling이라고 한다면 점화식은 이렇게된다.

tiling(n) =tiling(n-1) +tiling(n-2);

이다.

여기서 n이 의미하는것은 칠해야 되는 남은 타일의 수이다.

여기서 중복계산하는것을 막기위해 dp배열에다 결과값을 저장하면 된다.

return dp[n] =tiling(n-1) +tiling(n-2);

값을 반환하기 전에 중복계산을 하지 않았는지 확인해 줘야한다.

if(dp[n] !=0)
	return dp[n];

이러면 계산량이 많이 줄어든다.



추가로 이번에 동적계획법 공부하면서 배운것을 정리해 보자면

동적계획법은 일단 완전탐색과 비슷하다.

모든 경우의 수를 탐색해보는데 여기서 추가해야될것이

메모이제이션이다. 중복계산을 피하기 위해서 계산한 데이터를 저장해 놓으면서

최적의 값을 찾는것이다.

함수를 짤때는 제일먼저 기저사례를 만들고

그 다음에는 저장한 데이터 배열에 이미 계산한 값이 있는지 확인해보고

없으면 재귀함수를 이용한다.

동적계획법은 이미 해결한? 문제와 앞으로 해결해야할 문제들이 연관이 없다.

즉 앞으로풀어야할 문제들을 최적으로 풀기만 하면 된다.