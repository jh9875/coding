import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static int M, N;
	static int[][] map;
	static int[][] cache;
	static int[] moveY = {1, 0, -1, 0};
	static int[] moveX = {0, 1, 0, -1};
	
	public static void main(String[] args) throws Exception
	{
		
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		inputData();
		int ans =0;
		
		ans =move(0, 0);
		bw.write(ans +"\n");
		bw.flush();
		bw.close();
	}
	
	static void inputData() throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		M =Integer.parseInt(st.nextToken());
		N =Integer.parseInt(st.nextToken());
		map =new int[M][N];
		cache =new int[M][N];
		for(int i =0; i <M; i++)
			Arrays.fill(cache[i], -1);
		
		for(int i =0; i <M; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				map[i][j] =Integer.parseInt(st.nextToken());
		}
		br.close();
	}
	
	static int move(int y, int x)
	{
		if(y ==M-1 && x ==N-1)
			return 1;
		if(cache[y][x] !=-1)
			return cache[y][x];
		int nextY, nextX;
		cache[y][x] =0;
		
		for(int i =0; i <4; i++)
		{
			nextY =y +moveY[i];
			nextX =x +moveX[i];
			if(-1 <nextY && nextY <M && -1 <nextX && nextX <N &&
					map[y][x] >map[nextY][nextX])
				cache[y][x] +=move(nextY, nextX);
		}
		
		return cache[y][x];
	}
}
