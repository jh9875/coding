import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main
{	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int N, M;
		int[] arr;
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		arr =new int[M];
		
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <M; i++)
			arr[i] =Integer.parseInt(st.nextToken());
		
		bw.write(rotaryQueue(N, M, arr) +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	public static int rotaryQueue(int N, int M, int[] arr)
	{
		Deque<Integer> dq =new LinkedList<>();
		Iterator<Integer> it;
		int ans =0;			//연산의 횟수.
		int index =0;		//arr의 위치를 순서대로 가리킬 변수
		
		for(int i =1; i <N+1; i++)	//1~N으로 dq 초기화
			dq.offer(i);
		
		while(index <M)		//M개 다뽑을 때까지
		{
			int count =0;		//왼쪽에서 가까운지 오른쪽에서 가까운지 확인할 변수.
			int half =0;		//dq의 중간위치
			
			it =dq.iterator();
			while(it.hasNext())
			{
				if(it.next() !=arr[index])
					count++;
				else
					break;
			}
			
			half =dq.size()/2;
			
			if(count <=half)	//뽑아야할게 왼쪽에 있는경우.
			{
				int temp =0;
				while(true)
				{
					temp =dq.getFirst();		//1첫째 확인.
					
					if(temp ==arr[index])		//1번연산.
					{
						dq.pollFirst();
						index++;
						break;
					}else						//2번연산.
					{
						dq.offerLast(dq.pollFirst());
						ans++;
					}
				}
			}else
			{
				int temp =0;
				while(true)
				{
					temp =dq.getFirst();
					
					if(temp ==arr[index])
					{
						dq.pollFirst();
						index++;
						break;
					}else
					{
						dq.offerFirst(dq.pollLast());
						ans++;
					}
				}	
			}
		}
		return ans;
	}
}