일단 이 문제를 풀때 heap을 이용해서 풀어보았다.(heap공부도 할겸)
생각보다  에러가 많이나서 시간을 많이 잡아먹었다. 이것도 경험이 되겠지만..
힙을 완성하고 문제를 풀었는데 자꾸 런타임 에러가 났다. 이유는 잘 모르겠다..
다만 예측이 가는것은 해제된 메모리를 자꾸 참조할때 런타임 에러가 날수도 있다고
한다. 아마도 이것때문이 아닌가 싶다.

결국 다른사람꺼 참조해서 풀었다.
대부분 deque를 이용해서 풀었다.
원리는 슬라이딩 윈도우가 이동하는것처럼 deque도 뒤에는 넣고, 앞에는 빼는식이다.
근데 최솟값을 빼야한다.
이것을 어떻게 해결하냐면 삽입할때 deque의 뒤를 확인하고, 뒤에서 가장 큰수를 뺀다.
새로 삽입하는 수보다 먼저 들어왔으므로 먼저 없어질것이다.
이것을 코드로 표현하면 아래와 같다.
int n =Integer.parseInt(inputs[i]);		//A[i]
while(!deque.isEmpty() && deque.getLast().value > n)
	deque.removeLast();
deque.addLast(new Node(n, i));

// 너무 오래되서 빼야할 박스들을 빼는 부분
if (deque.getFirst().index <= i -L)
	deque.removeFirst();
bw.write(deque.getFirst().value + " ");
밑에 코드는 슬라이딩 윈도우가 움직이므로 범위를 벗어난 데이터를 없애는것이다.