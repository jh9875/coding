import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int r;
		int c;
		Point(int r, int c)
		{
			this.r =r;
			this.c =c;
		}
	}
	static int N;
	static int[][] map;
	static int[] dirR = {0, 1, 0, -1};
	static int[] dirC = {1, 0, -1, 0};
	static boolean[][] visited;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		N =Integer.parseInt(br.readLine());
		map =new int[N][N];
		visited =new boolean[N][N];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				map[i][j] =Integer.parseInt(st.nextToken());
		}
		
		bw.write(dfs() +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	public static int dfs()
	{
		int ans =1;
		
		for(int a =1; a <=100; a++)
		{
			int sum =0;
			visited =new boolean[N][N];
			for(int i =0; i <N; i++)
			{
				for(int j =0; j <N; j++)
				{
					if(map[i][j] <=a)
						visited[i][j] =true;
				}
			}
			
			for(int i =0; i <N; i++)
			{
				for(int j =0; j <N; j++)
				{
					if(!visited[i][j])
					{
						dfs(i, j);
						sum++;
					}
				}
			}
			
			if(sum >ans)
				ans =sum;
		}
		
		return ans;
	}
	public static void dfs(int r, int c)
	{
		for(int i =0; i <4; i++)
		{
			int nextR =r +dirR[i];
			int nextC =c +dirC[i];
			
			if(0 <=nextR && nextR <N && 0 <=nextC && nextC <N && !visited[nextR][nextC])
			{
				visited[nextR][nextC] =true;
				dfs(nextR, nextC);
			}
		}
	}
}
