import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static int[][] sticker;
	static int[][] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int T;
		
		T =Integer.parseInt(br.readLine());
		
		while(T-- >0)
		{
			N =Integer.parseInt(br.readLine());
			sticker =new int[3][N+1];
			cache =new int[3][N+1];
			for(int i =0; i <3; i++)
				Arrays.fill(cache[i], -1);
			
			st =new StringTokenizer(br.readLine());		//line1
			for(int i =1; i <=N; i++)
				sticker[1][i] =Integer.parseInt(st.nextToken());
			st =new StringTokenizer(br.readLine());		//line2
			for(int i =1; i <=N; i++)
				sticker[2][i] =Integer.parseInt(st.nextToken());
			bw.write(solve(1, 0) +"\n");
		}
		bw.flush();
	}
	
	static int solve(int index, int prevRow)		//prevRow ==0 => not selected.
	{
		if(index >N)
			return 0;
		if(cache[prevRow][index] !=-1)
			return cache[prevRow][index];
		
		if(prevRow ==1)
			cache[prevRow][index] =Math.max(solve(index+1, 2) +sticker[2][index], solve(index+1, 0));
		else if(prevRow ==2)
			cache[prevRow][index] =Math.max(solve(index+1, 1) +sticker[1][index], solve(index+1, 0));
		else	//prevRow ==0
			cache[prevRow][index] =Math.max(solve(index+1, 1) +sticker[1][index], solve(index+1, 2) +sticker[2][index]);
		
		return cache[prevRow][index];
	}
}
