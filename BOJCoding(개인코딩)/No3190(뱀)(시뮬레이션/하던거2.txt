import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Snake
	{
		Point haed;
		HashSet<Point> hs;
		int dir;
		
		Snake()				//시작위치1, 방향 오른쪽.
		{
			this.haed =new Point(1,1);
			this.hs =new HashSet<>();
			this.dir =0;
		}
	}
	static class TurnInfo
	{
		int t;
		char c;
		
		TurnInfo(int t, char c)
		{
			this.t =t;
			this.c =c;
		}
	}
	static class Point
	{
		int r;
		int c;
		
		Point(int r, int c)
		{
			this.r =r;
			this.c =c;
		}
	}
	static int N;
	static int[] dirR = {0, 1, 0, -1};			//동,남,서,북
	static int[] dirC = {1, 0, -1, 0};
	static char[][] map;
	static Queue<TurnInfo> queue =new LinkedList<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int K, L;
		
		N =Integer.parseInt(br.readLine());				//map
		map =new char[N+1][N+1];
		
		K =Integer.parseInt(br.readLine());				//apple
		for(int i =0; i <K; i++)
		{
			st =new StringTokenizer(br.readLine());
			map[Integer.parseInt(st.nextToken())][Integer.parseInt(st.nextToken())] ='A';
		}
		
		L =Integer.parseInt(br.readLine());				//turnInfo
		for(int i =0; i <L; i++)
		{
			st= new StringTokenizer(br.readLine());
			queue.offer(new TurnInfo(Integer.parseInt(st.nextToken()), st.nextToken().charAt(0)));
		}
		
		bw.write(move() +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static int move()
	{
		Snake s =new Snake();
		int T =0;
		int nextR =0;
		int nextC =0;
		
		
		while(true)
		{
			nextR =s.haed.r +dirR[s.dir];
			nextC =s.haed.c +dirC[s.dir];
			
			if(nextR <1 && N <nextR && nextC <1 && N <nextC)		//범위를 벚어나는 경우.
				break;
			if(s.hs.contains(new Point(nextR, nextC)))				//몸통과 부딫히는 경우.
				break;
			T++;
		}
		
		return T;
	}
}
