import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.HashSet;

public class Main
{	
	static int[] sorted =new int[10000000];
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int N =Integer.parseInt(br.readLine());
		int[] arr =new int[N];
		for(int i =0; i <N; i++)
			arr[i] =Integer.parseInt(br.readLine());
		
		mergeSort(arr, 0, arr.length-1);
		
		for(int i =0; i <N; i++)
			bw.write(arr[i] + "\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void mergeSort(int[] list, int left, int right)
	{
		int mid;
		
		if(left <right)
		{
			mid =(left+right)/2;
			mergeSort(list, left, mid);
			mergeSort(list, mid+1, right);
			merge(list, left, mid, right);
		}
	}
	public static void merge(int[] list, int left, int mid, int right)
	{
		int i, j, k, l;
		i =left;
		j =mid+1;
		k =left;
		
		while(i <=mid && j <=right)
		{
			if(list[i] <=list[j])
				sorted[k++] =list[i++];
			else
				sorted[k++] =list[j++];
		}
		
		if(i >mid)
		{
			for(l =j; l <=right; l++)
				sorted[k++] =list[l];
		}else
		{
			for(l =i; l <=mid; l++)
				sorted[k++] =list[l];
		}
		
		for(l =left; l <=right; l++)
			list[l] =sorted[l];
	}
}