import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		int[][] board;
		
		N =Integer.parseInt(br.readLine());
		board =new int[N][N];
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <N; j++)
				board[i][j] =Integer.parseInt(st.nextToken());
		}
		ans =solve(board, 0);
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve(int[][] arr, int count)
	{
		if(count >5)
			return 0;
			
		int ret =0;
		ret =maxNumber(arr);
		
		for(int dir =0; dir <4; dir++)
		{
			int[][] copy =arrCopy(arr);
			move(copy, dir);
			ret =Math.max(ret, solve(copy, count+1));
		}
		return ret;
	}
	static void move(int[][] arr, int dir)
	{
		if(dir ==0)				//s
		{
			boolean[][] visited =new boolean[N][N];
			for(int row =N-2; row >=0; row--)
			{
				for(int col =0; col <N; col++)
				{
					if(arr[row][col] !=0)
					{
						int nextR =row;
						int value =arr[row][col];
						arr[row][col] =0;
						while(nextR <N-1 && arr[nextR][col] ==0)
							nextR++;
						if(arr[nextR][col] ==0)			//비어있는겨우.
						{
							arr[nextR][col] =value;
						}else								//값이 있을때,
						{
							if(arr[nextR][col] ==value)		//같은경우.
							{
								if(!visited[nextR][col])			//같은데 아직 합쳐지지 않은 값일경우.
								{
									arr[nextR][col] =value*2;
									visited[nextR][col] =true;
								}else								//같은데 합쳐진 경우.
								{
									arr[nextR-1][col] =value;
								}
							}else								//다른경우.
							{
								arr[nextR-1][col] =value;
							}
						}
					}
				}
			}
		}else if(dir ==1)		//w
		{
			boolean[][] visited =new boolean[N][N];
			for(int col =1; col <N; col++)
			{
				for(int row =0; row <N; row++)
				{
					if(arr[row][col] !=0)
					{
						int nextC =col;
						int value =arr[row][col];
						arr[row][col] =0;
						while(nextC >0 && arr[row][nextC] ==0)
							nextC--;
						if(arr[row][nextC] ==0)			//비어있는겨우.
						{
							arr[row][nextC] =value;
						}else								//값이 있을때,
						{
							if(arr[row][nextC] ==value)		//같은경우.
							{
								if(!visited[row][nextC])			//같은데 아직 합쳐지지 않은 값일경우.
								{
									arr[row][nextC] =value*2;
									visited[row][nextC] =true;
								}else								//같은데 합쳐진 경우.
								{
									arr[row][nextC+1] =value;
								}
							}else								//다른경우.
							{
								arr[row][nextC+1] =value;
							}
						}
					}
				}
			}
		}else if(dir ==2)		//n
		{
			boolean[][] visited =new boolean[N][N];
			for(int row =1; row <N; row++)
			{
				for(int col =0; col <N; col++)
				{
					if(arr[row][col] !=0)
					{
						int nextR =row;
						int value =arr[row][col];
						arr[row][col] =0;
						while(nextR >0 && arr[nextR][col] ==0)
							nextR--;
						if(arr[nextR][col] ==0)			//비어있는겨우.
						{
							arr[nextR][col] =value;
						}else								//값이 있을때,
						{
							if(arr[nextR][col] ==value)		//같은경우.
							{
								if(!visited[nextR][col])			//같은데 아직 합쳐지지 않은 값일경우.
								{
									arr[nextR][col] =value*2;
									visited[nextR][col] =true;
								}else								//같은데 합쳐진 경우.
								{
									arr[nextR+1][col] =value;
								}
							}else								//다른경우.
							{
								arr[nextR+1][col] =value;
							}
						}
					}
				}
			}
		}else if(dir ==3)		//e
		{
			boolean[][] visited =new boolean[N][N];
			for(int col =N-2; col >=0; col--)
			{
				for(int row =0; row <N; row++)
				{
					if(arr[row][col] !=0)
					{
						int nextC =col;
						int value =arr[row][col];
						arr[row][col] =0;
						while(nextC <N-1 && arr[row][nextC] ==0)
							nextC++;
						if(arr[row][nextC] ==0)			//비어있는겨우.
						{
							arr[row][nextC] =value;
						}else								//값이 있을때,
						{
							if(arr[row][nextC] ==value)		//같은경우.
							{
								if(!visited[row][nextC])			//같은데 아직 합쳐지지 않은 값일경우.
								{
									arr[row][nextC] =value*2;
									visited[row][nextC] =true;
								}else								//같은데 합쳐진 경우.
								{
									arr[row][nextC-1] =value;
								}
							}else								//다른경우.
							{
								arr[row][nextC-1] =value;
							}
						}
					}
				}
			}
		}
	}
	static int[][] arrCopy(int[][] arr)
	{
		int[][] temp =new int[N][N];
		for(int i =0; i <N; i++)
			for(int j =0; j <N; j++)
				temp[i][j] =arr[i][j];
		return temp;
	}
	static int maxNumber(int[][] arr)
	{
		int ret =0;
		for(int i =0; i <N; i++)
			for(int j =0; j <N; j++)
				if(ret <arr[i][j])
					ret =arr[i][j];
		return ret;
	}
}
