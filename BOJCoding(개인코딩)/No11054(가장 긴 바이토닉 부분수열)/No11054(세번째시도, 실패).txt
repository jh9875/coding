import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static int[] arr;
	static int[] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		
		N =Integer.parseInt(br.readLine());
		arr =new int[N];
		cache =new int[N];
		
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <N; i++)
			arr[i] =Integer.parseInt(st.nextToken());
		ans =solve();
		bw.write(ans +"\n");
		bw.flush();
	}
	
	static int solve()
	{
		int ret =0;
		int sum1, sum2;
		
		for(int divide =0; divide <N; divide++)
		{
			Arrays.fill(cache, -1);
			sum1 =0; sum2 =0;
			
			sum1 =solve1(divide)+1;
			for(int next =divide +1; next <N; next++)
			{
				if(arr[divide] >arr[next])
				{
					sum2 =solve2(next) +1;
					break;
				}
			}
			ret =Math.max(ret, sum1+sum2);
		}
		return ret;
	}
	
	static int solve1(int index)
	{
		if(cache[index] !=-1)
			return cache[index];
		cache[index] =0;
		
		for(int before =index-1; before >=0; before--)
			if(arr[before] <arr[index])
				cache[index] =Math.max(cache[index], solve1(before) +1);
		return cache[index];
	}
	static int solve2(int index)
	{
		if(cache[index] !=-1)
			return cache[index];
		cache[index] =0;
		
		for(int next =index+1; next <N; next++)
			if(arr[index] >arr[next])
				cache[index] =Math.max(cache[index], solve2(next) +1);
		return cache[index];
	}
}
