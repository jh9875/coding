import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static int max =Integer.MIN_VALUE;
	static int maxIndex =-1;
	static int N;
	static int[][] arr;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int p, c, w;
		
		N =Integer.parseInt(br.readLine());
		arr =new int[N+1][N+1];
		
		for(int i =0; i <N-1; i++)
		{
			st =new StringTokenizer(br.readLine());
			p =Integer.parseInt(st.nextToken());
			c =Integer.parseInt(st.nextToken());
			w =Integer.parseInt(st.nextToken());
			arr[p][c] =w;
			arr[c][p] =w;
		}
		
		for(int i =2; i <N+1; i++)				//1(root)에서 가장 멀리 떨어진 노드
		{
			if(arr[1][i] !=0)
			{
				boolean[] visited =new boolean[N+1];
				visited[1] =true;
				visited[i] =true;
				dfs(i, arr[1][i], visited);
				System.out.println("============================");
			}
		}
		System.out.println("maxIndex: " +maxIndex);
		System.out.println("max: " +max);
		int num =maxIndex;
		maxIndex =-1;
		max =Integer.MIN_VALUE;
		
		for(int i =1; i <N+1; i++)
		{
			if(arr[num][i] !=0)
			{
				boolean[] visited =new boolean[N+1];
				visited[num] =true;
				visited[i] =true;
				dfs(i, arr[num][i], visited);
				System.out.println("============================");
			}
		}
		System.out.println("maxIndex: " +maxIndex);
		System.out.println("max: " +max);
		//bw.write(max +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void dfs(int index, int sum, boolean[] visited)
	{
		
		System.out.println("index: " +index);
		System.out.println("sum: " +sum);
		for(int i =0; i <N+1; i++)
			System.out.print(visited[i] + " ");
		System.out.println();
		
		if(sum >max)
		{
			max =sum;
			maxIndex =index;
		}
		
		for(int i =1; i <N+1; i++)
		{
			if(!visited[i] && arr[index][i] !=0)
			{
				visited[i] =true;
				dfs(i, sum+arr[index][i], visited);
			}
		}
	}
}