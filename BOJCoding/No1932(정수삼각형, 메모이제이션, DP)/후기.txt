내가 쓰는데 별로 좋지않다는거는 알고 있었지만 한문제를 이렇게 오래 보고도
제대로 못푸는 내가 한심하다..
나는 이 길이 진짜 안맞는듯 싶다...
소스를 보고 난 후에는 이해가 가긴 하는데 나중에 비슷한 문제가 나오면 풀수 있을까
의문이다.

아무튼 이번문제에서 배운점은 메모이제이션이다.
이 문제는 메모이제이션에 대한 아주 기본적인 문제인것같다.
뭐라고 말해야 될지 모르겠지만 데이터의 중복계산을 피하기 위해
전에 계산 했던것들을 저장해가며 프로그램을 돌리는 방법이다.

처음엔 내가 문제를 잘못 이해해서 오래걸린 문제점도 있었다.

핵심은 식을 세우는 것인것 같다.
삼각형이 아래와 같이 있으면
			*
		              **
		             ***
		            ****
수를 계산할 때 상황에 따라 나누는것이다.
저 삼각형은 실질적으로 배열에 넣어서 생각해보면
	*
	**
	***
	****
	*****
위와같이 생각할 수 있다.
이 문제에서 삼각형의 규칙은
대각선 위의 두수중 최댓값이 될수있는 값들을 선택해야한다.
그럼 2가지 경우로 나눌수 있는데
삼각형의 가장자리 부분은 대각선 방향중 위에 있는게 1개뿐이고, 중간은 두개중하나를
택하는 것이다.
그중 가장자리에서도 왼쪽가장자리, 오른쪽 가장자리 2가지 이다.

그럼 총 3가지 경우로 나누어 생각할 수 있다.
1. 왼쪽 가장자리
2. 오른쪽 가장자리
3. 중간자리

이것을 코드로 구현해보면 아래와 같이 할 수 있다.

for(int i =1; i <arr.length; i++)	//2번째부터 마지막 까지 계산하는것이므로
{
	for(int j =0; j <=i; j++)
	{
		if(j ==0)		//왼쪽 가장자리
			arr[i][j] = arr[i][j] +arr[i-1][j];
		else if(i ==j)	//오른쪽 가장자리
			arr[i][j] =arr[i][j] +arr[i -1][j -1];//(왼쪽 위이므로 j -1)
		else		//중간값
			arr[i][j] =Math.max(arr[i][j] +arr[i-1][j], arr[i][j -1] +arr[i-1][j]);	  
	}
}
이렇게 보니 이해가 다 된다...

동적프로그래밍의 핵심은..?

참고: http://mygumi.tistory.com/89