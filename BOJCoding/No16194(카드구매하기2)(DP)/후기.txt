카드 구매하기1과 거의 같은문제라서 쉽게 풀수있었다.
개념을 다시 정리해 보자면

카드 i개를 뽑기 위해선 있을수 있는 경우들이

카드팩 1개짜리를 구매하고, 카드 i-1개를 구매한다.
카드팩 2개짜리를 구매하고, 카드 i-2개를 구매한다.
.....

이런식으로 n개짜리를 구매하고 i-n개를 더 구매할 수 있는데
n은 i보다 작거나 같은수여야 한다.

이걸 점화식으로 나타내보면

dp[i] =card[n] +dp[i-n]

이 된다.

실제 코드에선 반복문이로 이게 실행이 되는데
dp[i]를 구할땐 전 이전 반복문 단계에서 dp[i-n]을 미리 구해져 있는 상황이다.

이걸 코드로 구현해보면

for(int i =1; i <=n; i++)
{
	for(int j =1; j <=i; j++)
	{
		dp[i] =Math.min(dp[i], card[j] +dp[i-j]);		//dp[i]는 Integer.MAX_VALUE로 설정되어있는 상황
	}	
}

