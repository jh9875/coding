import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int x;
		int y;
		Point(int x, int y)
		{
			this.x =x;
			this.y =y;
		}
	}
	static int[] dx = {-1, -1, 0, 1, 1, 1, 0, -1};
	static int[] dy = {0, 1, 1, 1, 0, -1, -1, -1};
	static int w;
	static int h;
	static int[][] map;
	static boolean[][] check;
	static int checkNum;
	public static void main(String[] args) throws IOException
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		do
		{
			String s =br.readLine();
			StringTokenizer st =new StringTokenizer(s);
			w =Integer.parseInt(st.nextToken());
			h =Integer.parseInt(st.nextToken());
			checkNum =101;
			if(w !=0 && h !=0)
			{
				map =new int[h][w];
				check =new boolean[h][w];
				for(int i =0; i <map.length; i++)
				{
					s =br.readLine();
					st =new StringTokenizer(s);
					for(int j =0; j <map[i].length; j++)
						map[i][j] =Integer.parseInt(st.nextToken());
				}
				for(int i =0; i <map.length; i++)
				{
					for(int j =0; j <map[i].length; j++)
					{
						if(map[i][j] ==1)
							bfs(i, j);
					}
				}
				int max =0;
				for(int i =0; i <map.length; i++)
					for(int j =0; j <map[i].length; j++)
						if(max <map[i][j])
							max =map[i][j];
				if(max ==0)
					bw.write(0 + "\n");
				else
					bw.write((max -100) +"\n");
					
			}
		}while(w !=0 && h !=0);
		bw.flush();
		bw.close();
		br.close();
	}
	public static void bfs(int x, int y)
	{
		Queue<Point> queue =new LinkedList<Point>();
		queue.add(new Point(x, y));
		check[x][y] =true;
		map[x][y] =checkNum;
		while(queue.size() >0)
		{
			Point p =queue.poll();
			for(int i =0; i <8; i++)
			{
				int nextX =p.x +dx[i];
				int nextY =p.y +dy[i];
				if(!(nextX >=0) || !(nextX <h) || !(nextY >=0) || !(nextY <w))
					continue;
				if(map[nextX][nextY] ==1 && !check[nextX][nextY])
				{
					map[nextX][nextY] =checkNum;
					check[nextX][nextY] =true;
					queue.add(new Point(nextX, nextY));
				}
			}
		}
		checkNum++;
	}
}