이 문제는 좀 골치아팠다.
도저히 이해가 안갔었다..
1차원 배열을 이용하는지는 알았는데 어떻게 돌아가는건지 이해는 안갔다.
근데 어쩌다가 설명을 아주 쉽게한 블로그를 찾아서 이해할수있었다.
(참고: https://bumbums.tistory.com/3)

일단 1차원 배열을 열을 나타낸다
만약 4*4판이라면 길이가 4인 배열을 선언한다.
처음은 0 0 0 0 이렇게 될것이다.
여기에 숫자를 채워나가면 된다.
내가 처음에 이해가 안됬던 부분이 여기인데
여기서 숫자는 열의 위치를 나타내고 index는 행의 위치다

만약 1 3 0 2
이면 1번째 행에 2번째 열에 퀸이있고(0열부터 시작),
2번째 행에 4번째 열에 퀸이있고 이런식이다.
시각적으로 나타내면
0 1 0 0
0 0 0 1
1 0 0 0
0 0 1 0
(1은 퀸, 0은 빈공간을 나타낸다.)
이런식이다.
그리고 아래에 백트랙킹 코드를 보면
public static void backTracking(int level)
	{
		if(level ==cols.length)
			count++;
		else
		{
			for(int i =0; i <cols.length; i++)
			{
				cols[level] =i;
				if(isPossible(level))
					backTracking(level +1);
			}
		}
	}
이렇다. 일단 첫째 level ==cols.length이면 카운트를 세는데,
이건 1번째 행에서 시작해서 마지막을 끝내고 넘어갔을때 1가지 NQueen문제가 완성
됬음을 의미한다. (level은 0부터 시작해서 cols.length -1까지인데 cols.length
까지이면 판을 다 채운것이므로)
그리고 else는 아직 채우고 있는 중을 의미하는데
파라미터에 level이 있다.
이건 현재 행수를 의미하는데 현재 행수에서 검사하는것이다.
for로 i 부터 cols.length전까지 확인해본다. 이것은 이 행에서 어떤 열에 퀸이
들어갈지 확인하는거다(isPossible) 그리고 이게 true라면 backTracking(level +1);
으로 다음레벨, 다음 행으로 넘어간다.

그리고 아래에 isPossible을 보면
public static boolean isPossible(int level)
	{
		for(int i =0; i <level; i++)
		{
			if(cols[level] ==cols[i] || Math.abs(level -i) == Math.abs(cols[level] -cols[i]))
				return false;
		}
		return true;
	}
코드가 이렇다.
여기서는 for문으로 0부터 level 전까지 검사한다.
이건 level 전까지 행의 퀸 위치를 확인하고 규칙에 위반되지 않는지 확인하는 것이다.
for문을 다끝나고 이상없으면 true를 리턴해서 가능한 위치라고 알린다.
아니면 중간에 false를 리턴한다.
이제 조건문을 보면
cols[level] ==cols[i]는 같은 열에 있는지 검사하는 것이다.
cols[level]은 이 함수가 실행되기 전에 cols[level]에 순서대로 넣은 수이고,
i는 level 전까지의 행에서 cols[i]이므로 그 전까지의 열의 위치를 나타낸다.
그리고 Math.abs(level -i) == Math.abs(cols[level] -cols[i])
이 조건은 대각선 위치 검사이다. 여기서 알아야 할 개념은 직각삼각형이 있을때
밑변의 길이와 높이의 길이가 같으면 같은 대각선상에 있다는 것이다.
level -i는 행의 위치를 뺀것이다. 이건 높이를 의미한다.
cols[level] -cols[i] 는 열의 차이니까 밑변을 의미한다. 이 두값에 절댓값을
씌어주고 값이 같으면 같은 대각선상에 있는것이므로 false가 된다.
