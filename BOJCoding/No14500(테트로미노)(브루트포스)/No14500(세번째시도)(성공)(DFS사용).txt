import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Point
	{
		int r;
		int c;
		int count;
		int sum;
		
		Point(int r, int c, int count, int sum)
		{
			this.r =r;
			this.c =c;
			this.count =count;
			this.sum =sum;
		}
	}
	static int max =Integer.MIN_VALUE;
	static int N, M;
	static int[][] map;
	static int[] dirR = {0, 1, 0, -1};		//동, 남, 서, 북
	static int[] dirC = {1, 0, -1, 0};
	static boolean[][] visited;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		map =new int[N][M];
		visited =new boolean[N][M];
		
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <M; j++)
				map[i][j] =Integer.parseInt(st.nextToken());
		}
		
		search();
		
		bw.write(max +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
	public static void search()
	{
		for(int i =0; i <N; i++)
		{
			for(int j =0; j <M; j++)
			{
				dfs(i, j, 1, map[i][j]);
				exceptionShape(i, j);
			}
		}
	}
	public static void exceptionShape(int r, int c)
	{
		int min =Integer.MAX_VALUE;
		int sum =map[r][c];
		int count =0;
		
		for(int i =0; i <4; i++)
		{
			int nextR =r+dirR[i];
			int nextC =c+dirC[i];
			
			if(0 <=nextR && nextR <N && 0 <=nextC && nextC <M)
			{
				sum +=map[nextR][nextC];
				count++;
				
				if(min >map[nextR][nextC])
					min =map[nextR][nextC];
			}
		}
		if(count ==4)
		{
			sum -=min;
			if(max <sum)
				max =sum;
		}else if(count ==3)
		{
			if(max <sum)
				max =sum;
		}
		
	}
	public static void dfs(int r, int c, int count, int sum)		//시작점을 기준의로 인근 4개칸을 조사하면 가능?(삿갓 모양  제외)
	{
		if(count ==4)
		{
			if(sum >max)
				max =sum;
			return;
		}
		
		visited[r][c] =true;
		
		for(int i =0; i <4; i++)
		{
			int nextR =r +dirR[i];
			int nextC =c +dirC[i];
			
			if(0 <=nextR && nextR <N && 0 <=nextC && nextC <M && !visited[nextR][nextC])
			{
				dfs(nextR, nextC, count+1, sum +map[nextR][nextC]);
			}
		}
		
		visited[r][c] =false;
	}
	
}
