import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;

public class Main
{	
	static class Edge implements Comparable<Edge>
	{
		int index;
		int cost;
		Edge(int i, int c)
		{
			this.index =i;
			this.cost =c;
		}
		@Override
		public int compareTo(Edge e)
		{
			return this.cost -e.cost;
		}
	}
	static class Graph
	{
		int N;
		ArrayList<Edge>[] list;
		
		Graph(int N)
		{
			this.N =N;
			list =new ArrayList[N+1];
			for(int i =0; i <N+1; i++)
				list[i] =new ArrayList<>();
		}
		public void inputData(int s, int e, int c)
		{
			list[s].add(new Edge(e, c));
		}
		public int[] dijkstra(int S)
		{
			int[] distance =new int[N+1];
			PriorityQueue<Edge> pq =new PriorityQueue<>();
			
			for(int i =1; i <N+1; i++)
				distance[i] =Integer.MAX_VALUE;
			
			pq.offer(new Edge(S, 0));
			distance[S] =0;
			
			while(!pq.isEmpty())
			{
				int curIndex =pq.poll().index;
				int size =list[curIndex].size();
				
				for(int i =0; i <size; i++)
				{
					int nextIndex =list[curIndex].get(i).index;
					int nextCost =list[curIndex].get(i).cost;
					
					if(distance[nextIndex] >distance[curIndex] +nextCost)
					{
						distance[nextIndex] =distance[curIndex] +nextCost;
						pq.offer(new Edge(nextIndex, distance[nextIndex]));
					}
				}
			}
			
			return distance;
		}
	}
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int N, M, K;
		int[] city;
		String[] input;
		Graph g;
		
		input =br.readLine().split(" ");		//N, M, K
		N =Integer.parseInt(input[0]);
		M =Integer.parseInt(input[1]);
		K =Integer.parseInt(input[2]);
		
		g =new Graph(N);
		city =new int[N+1];
		
		for(int i =0; i <M; i++)
		{
			input =br.readLine().split(" ");
			int s =Integer.parseInt(input[0]);
			int e =Integer.parseInt(input[1]);
			int c =Integer.parseInt(input[2]);
			g.inputData(s, e, c);
		}
		int[] temp;
		
		for(int i =1; i <N+1; i++)		//도시 N에서 K로 가는 최솟값.
		{
			if(i ==K)
				continue;
			temp =g.dijkstra(i);
			city[i] =temp[K];
		}
		
		temp =g.dijkstra(K);
		for(int i =1; i <N+1; i++)		//도시 K에서 각 도시로 가는 값.
			city[i] +=temp[i];
		
		Arrays.sort(city);
		bw.write(city[N] +"\n");
		bw.flush();
		bw.close();
		br.close();
	}
}